SET client_min_messages = warning;
-- test varchar semantic btree index and hash index
drop table if exists test_varchar_index;
create table test_varchar_index (id int, city varchar (10 char));
create unique index test_varchar_index_btree on test_varchar_index using btree(city);
create index test_varchar_index_hash on test_varchar_index using hash(city);
insert into test_varchar_index values(1, 'beijing');
insert into test_varchar_index values(2, 'shanghai');
insert into test_varchar_index values(3, 'tianjin');
insert into test_varchar_index values(4, 'guangzhou');
explain (verbose, costs off) select * from test_varchar_index where city = 'beijing';
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Index Scan using test_varchar_index_hash on public.test_varchar_index
   Output: id, city
   Index Cond: ((test_varchar_index.city)::text = 'beijing'::text)
(3 rows)

explain (verbose, costs off) select * from test_varchar_index where city > 'beijing';
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Bitmap Heap Scan on public.test_varchar_index
   Output: id, city
   Recheck Cond: ((test_varchar_index.city)::text > 'beijing'::text)
   ->  Bitmap Index Scan on test_varchar_index_btree
         Index Cond: ((test_varchar_index.city)::text > 'beijing'::text)
(5 rows)

drop table test_varchar_index;
--test varchar semantic ustore using ubtree index
drop table if exists test_varchar_ubtree;
create table test_varchar_ubtree (id int, city varchar (10 char)) with (storage_type=ustore);
create unique index test_varchar_ubtree_btree_index on test_varchar_ubtree using ubtree(city);
insert into test_varchar_ubtree values(1, 'beijing');
insert into test_varchar_ubtree values(2, 'shanghai');
insert into test_varchar_ubtree values(3, 'tianjin');
insert into test_varchar_ubtree values(4, 'guangzhou');
explain (verbose, costs off) select * from test_varchar_ubtree where city = 'beijing';
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 [Bypass]
 Index Scan using test_varchar_ubtree_btree_index on public.test_varchar_ubtree
   Output: id, city
   Index Cond: ((test_varchar_ubtree.city)::text = 'beijing'::text)
(4 rows)

explain (verbose, costs off) select * from test_varchar_ubtree where city > 'beijing';
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Bitmap Heap Scan on public.test_varchar_ubtree
   Output: id, city
   Recheck Cond: ((test_varchar_ubtree.city)::text > 'beijing'::text)
   ->  Bitmap Index Scan on test_varchar_ubtree_btree_index
         Index Cond: ((test_varchar_ubtree.city)::text > 'beijing'::text)
(5 rows)

drop table test_varchar_ubtree;
-- test varchar semantic cstore using cbtree index
drop table if exists test_varchar_cbtree;
create table test_varchar_cbtree (id int, city varchar (10 char)) with (orientation=column);
create unique index test_varchar_cbtree_btree_index on test_varchar_cbtree using btree(city);
insert into test_varchar_cbtree values(1, 'beijing');
insert into test_varchar_cbtree values(2, 'shanghai');
insert into test_varchar_cbtree values(3, 'tianjin');
insert into test_varchar_cbtree values(4, 'guangzhou');
explain (verbose, costs off) select city from test_varchar_cbtree where city = 'beijing';
                              QUERY PLAN                              
----------------------------------------------------------------------
 Row Adapter
   Output: city
   ->  CStore Scan on public.test_varchar_cbtree
         Output: city
         Filter: ((test_varchar_cbtree.city)::text = 'beijing'::text)
(5 rows)

explain (verbose, costs off) select city from test_varchar_cbtree where city > 'beijing';
                              QUERY PLAN                              
----------------------------------------------------------------------
 Row Adapter
   Output: city
   ->  CStore Scan on public.test_varchar_cbtree
         Output: city
         Filter: ((test_varchar_cbtree.city)::text > 'beijing'::text)
(5 rows)

drop table test_varchar_cbtree;
-- test varchar semantic partition table using btree index
drop table if exists test_varchar_partition;
create table test_varchar_partition (id int, city varchar (10 char)) partition by range (city) ( partition p1 values less than ('dalian'), partition p2 values less than (MAXVALUE ));
create index test_varchar_partition_btree_index on test_varchar_partition using btree(city) local;
insert into test_varchar_partition values(1, 'beijing');
insert into test_varchar_partition values(2, 'shanghai');
insert into test_varchar_partition values(3, 'tianjin');
insert into test_varchar_partition values(4, 'guangzhou');
explain (verbose, costs off) select city from test_varchar_partition where city = 'beijing';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Partitioned Bitmap Heap Scan on public.test_varchar_partition
   Output: city
   Recheck Cond: ((test_varchar_partition.city)::text = 'beijing'::text)
   Selected Partitions:  1
   ->  Partitioned Bitmap Index Scan on test_varchar_partition_btree_index
         Index Cond: ((test_varchar_partition.city)::text = 'beijing'::text)
         Selected Partitions:  1
(7 rows)

explain (verbose, costs off) select city from test_varchar_partition where city > 'beijing';
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Partition Iterator
   Output: city
   Iterations: 2
   ->  Partitioned Seq Scan on public.test_varchar_partition
         Output: city
         Filter: ((test_varchar_partition.city)::text > 'beijing'::text)
         Selected Partitions:  1..2
(7 rows)

drop index test_varchar_partition_btree_index;
create index test_varchar_partition_btree_index on test_varchar_partition using btree(city) global;
explain (verbose, costs off) select city from test_varchar_partition where city = 'beijing';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Bitmap Heap Scan on public.test_varchar_partition
   Output: city
   Recheck Cond: ((test_varchar_partition.city)::text = 'beijing'::text)
   ->  Bitmap Index Scan on test_varchar_partition_btree_index
         Index Cond: ((test_varchar_partition.city)::text = 'beijing'::text)
(5 rows)

explain (verbose, costs off) select city from test_varchar_partition where city > 'beijing';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Bitmap Heap Scan on public.test_varchar_partition
   Output: city
   Recheck Cond: ((test_varchar_partition.city)::text > 'beijing'::text)
   ->  Bitmap Index Scan on test_varchar_partition_btree_index
         Index Cond: ((test_varchar_partition.city)::text > 'beijing'::text)
(5 rows)

create index test_varchar_partition_hash_index on test_varchar_partition using hash(city) local;
explain (verbose, costs off) select city from test_varchar_partition where city = 'beijing';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Partitioned Bitmap Heap Scan on public.test_varchar_partition
   Output: city
   Recheck Cond: ((test_varchar_partition.city)::text = 'beijing'::text)
   Selected Partitions:  1
   ->  Partitioned Bitmap Index Scan on test_varchar_partition_hash_index
         Index Cond: ((test_varchar_partition.city)::text = 'beijing'::text)
         Selected Partitions:  1
(7 rows)

explain (verbose, costs off) select city from test_varchar_partition where city > 'beijing';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Bitmap Heap Scan on public.test_varchar_partition
   Output: city
   Recheck Cond: ((test_varchar_partition.city)::text > 'beijing'::text)
   ->  Bitmap Index Scan on test_varchar_partition_btree_index
         Index Cond: ((test_varchar_partition.city)::text > 'beijing'::text)
(5 rows)

drop table test_varchar_partition;
-- test byte semantic btree index and hash index
drop table if exists test_varchar_byte_index;
create table test_varchar_byte_index (id int, city varchar (10 byte));
create unique index test_varchar_byte_index_btree on test_varchar_byte_index using btree(city);
create index test_varchar_byte_index_hash on test_varchar_byte_index using hash(city);
insert into test_varchar_byte_index values(1, 'beijing');
insert into test_varchar_byte_index values(2, 'shanghai');
insert into test_varchar_byte_index values(3, 'tianjin');
insert into test_varchar_byte_index values(4, 'guangzhou');
explain (verbose, costs off) select * from test_varchar_byte_index where city = 'beijing';
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Index Scan using test_varchar_byte_index_hash on public.test_varchar_byte_index
   Output: id, city
   Index Cond: ((test_varchar_byte_index.city)::text = 'beijing'::text)
(3 rows)

explain (verbose, costs off) select * from test_varchar_byte_index where city > 'beijing';
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Bitmap Heap Scan on public.test_varchar_byte_index
   Output: id, city
   Recheck Cond: ((test_varchar_byte_index.city)::text > 'beijing'::text)
   ->  Bitmap Index Scan on test_varchar_byte_index_btree
         Index Cond: ((test_varchar_byte_index.city)::text > 'beijing'::text)
(5 rows)

drop table test_varchar_byte_index;
--test byte semantic ustore using ubtree index
drop table if exists test_varchar_byte_ubtree;
create table test_varchar_byte_ubtree (id int, city varchar (10 byte)) with (storage_type=ustore);
create unique index test_varchar_byte_ubtree_btree_index on test_varchar_byte_ubtree using ubtree(city);
insert into test_varchar_byte_ubtree values(1, 'beijing');
insert into test_varchar_byte_ubtree values(2, 'shanghai');
insert into test_varchar_byte_ubtree values(3, 'tianjin');
insert into test_varchar_byte_ubtree values(4, 'guangzhou');
explain (verbose, costs off) select * from test_varchar_byte_ubtree where city = 'beijing';
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 [Bypass]
 Index Scan using test_varchar_byte_ubtree_btree_index on public.test_varchar_byte_ubtree
   Output: id, city
   Index Cond: ((test_varchar_byte_ubtree.city)::text = 'beijing'::text)
(4 rows)

explain (verbose, costs off) select * from test_varchar_byte_ubtree where city > 'beijing';
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Bitmap Heap Scan on public.test_varchar_byte_ubtree
   Output: id, city
   Recheck Cond: ((test_varchar_byte_ubtree.city)::text > 'beijing'::text)
   ->  Bitmap Index Scan on test_varchar_byte_ubtree_btree_index
         Index Cond: ((test_varchar_byte_ubtree.city)::text > 'beijing'::text)
(5 rows)

drop table test_varchar_byte_ubtree;
-- test byte semantic cstore using cbtree index
drop table if exists test_varchar_byte_cbtree;
create table test_varchar_byte_cbtree (id int, city varchar(10 byte)) with (orientation=column);
create unique index test_varchar_byte_cbtree_btree_index on test_varchar_byte_cbtree using btree(city);
insert into test_varchar_byte_cbtree values(1, 'beijing');
insert into test_varchar_byte_cbtree values(2, 'shanghai');
insert into test_varchar_byte_cbtree values(3, 'tianjin');
insert into test_varchar_byte_cbtree values(4, 'guangzhou');
explain (verbose, costs off) select city from test_varchar_byte_cbtree where city = 'beijing';
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Row Adapter
   Output: city
   ->  CStore Scan on public.test_varchar_byte_cbtree
         Output: city
         Filter: ((test_varchar_byte_cbtree.city)::text = 'beijing'::text)
(5 rows)

explain (verbose, costs off) select city from test_varchar_byte_cbtree where city > 'beijing';
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Row Adapter
   Output: city
   ->  CStore Scan on public.test_varchar_byte_cbtree
         Output: city
         Filter: ((test_varchar_byte_cbtree.city)::text > 'beijing'::text)
(5 rows)

drop table test_varchar_byte_cbtree;
-- test byte semantic partition table using btree index
drop table if exists test_varchar_byte_partition;
create table test_varchar_byte_partition (id int, city varchar (10 char)) partition by range (city) ( partition p1 values less than ('dalian'), partition p2 values less than (MAXVALUE ));
create index test_varchar_byte_partition_btree_index on test_varchar_byte_partition using btree(city) local;
insert into test_varchar_byte_partition values(1, 'beijing');
insert into test_varchar_byte_partition values(2, 'shanghai');
insert into test_varchar_byte_partition values(3, 'tianjin');
insert into test_varchar_byte_partition values(4, 'guangzhou');
explain (verbose, costs off) select city from test_varchar_byte_partition where city = 'beijing';
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Partitioned Bitmap Heap Scan on public.test_varchar_byte_partition
   Output: city
   Recheck Cond: ((test_varchar_byte_partition.city)::text = 'beijing'::text)
   Selected Partitions:  1
   ->  Partitioned Bitmap Index Scan on test_varchar_byte_partition_btree_index
         Index Cond: ((test_varchar_byte_partition.city)::text = 'beijing'::text)
         Selected Partitions:  1
(7 rows)

explain (verbose, costs off) select city from test_varchar_byte_partition where city > 'beijing';
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Partition Iterator
   Output: city
   Iterations: 2
   ->  Partitioned Seq Scan on public.test_varchar_byte_partition
         Output: city
         Filter: ((test_varchar_byte_partition.city)::text > 'beijing'::text)
         Selected Partitions:  1..2
(7 rows)

drop index test_varchar_byte_partition_btree_index;
create index test_varchar_byte_partition_btree_index on test_varchar_byte_partition using btree(city) global;
explain (verbose, costs off) select city from test_varchar_byte_partition where city = 'beijing';
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Bitmap Heap Scan on public.test_varchar_byte_partition
   Output: city
   Recheck Cond: ((test_varchar_byte_partition.city)::text = 'beijing'::text)
   ->  Bitmap Index Scan on test_varchar_byte_partition_btree_index
         Index Cond: ((test_varchar_byte_partition.city)::text = 'beijing'::text)
(5 rows)

explain (verbose, costs off) select city from test_varchar_byte_partition where city > 'beijing';
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Bitmap Heap Scan on public.test_varchar_byte_partition
   Output: city
   Recheck Cond: ((test_varchar_byte_partition.city)::text > 'beijing'::text)
   ->  Bitmap Index Scan on test_varchar_byte_partition_btree_index
         Index Cond: ((test_varchar_byte_partition.city)::text > 'beijing'::text)
(5 rows)

create index test_varchar_byte_partition_hash_index on test_varchar_byte_partition using hash(city) local;
explain (verbose, costs off) select city from test_varchar_byte_partition where city = 'beijing';
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Partitioned Bitmap Heap Scan on public.test_varchar_byte_partition
   Output: city
   Recheck Cond: ((test_varchar_byte_partition.city)::text = 'beijing'::text)
   Selected Partitions:  1
   ->  Partitioned Bitmap Index Scan on test_varchar_byte_partition_hash_index
         Index Cond: ((test_varchar_byte_partition.city)::text = 'beijing'::text)
         Selected Partitions:  1
(7 rows)

explain (verbose, costs off) select city from test_varchar_byte_partition where city > 'beijing';
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Bitmap Heap Scan on public.test_varchar_byte_partition
   Output: city
   Recheck Cond: ((test_varchar_byte_partition.city)::text > 'beijing'::text)
   ->  Bitmap Index Scan on test_varchar_byte_partition_btree_index
         Index Cond: ((test_varchar_byte_partition.city)::text > 'beijing'::text)
(5 rows)

drop table test_varchar_byte_partition;
