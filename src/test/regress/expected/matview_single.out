-- prepare
create table test(c1 int);
insert into test values(1);
-- base op
drop Materialized view mvtest_tm;
ERROR:  materialized view "mvtest_tm" does not exist
CREATE MATERIALIZED VIEW mvtest_tm AS select *from test;
select *From mvtest_tm;
 c1 
----
  1
(1 row)

insert into test values(1);
REFRESH MATERIALIZED VIEW mvtest_tm;
select *from mvtest_tm;
 c1 
----
  1
  1
(2 rows)

drop Materialized view mvtest_tm;
-- error
create incremental MATERIALIZED VIEW mvtest_inc AS select *from test;
REFRESH incremental MATERIALIZED VIEW mvtest_tm;
ERROR:  relation "mvtest_tm" does not exist
-- test matview with anounymous types
create database test_imv_db with dbcompatibility 'b';
\c test_imv_db
-- case 1: drop type first
create table imv1_t(a set('ad','asf'), c int);
NOTICE:  CREATE TABLE will create implicit set "imv1_t_a_set" for column "imv1_t.a"
create incremental materialized view imv1_v as select * from imv1_t;
create incremental materialized view imv12_v as select * from imv1_t;
drop type imv1_t_a_set cascade;
NOTICE:  drop cascades to 6 other objects
DETAIL:  drop cascades to table imv1_t column a
drop cascades to materialized view imv1_v
drop cascades to materialized view imv12_v
drop cascades to materialized view imv1_v column a
--?.*
drop cascades to materialized view imv12_v column a
select oid, relname from pg_class where relname like 'mlog%';
 oid | relname 
-----+---------
(0 rows)

drop table imv1_t cascade;
select oid, relname from pg_class where relname like 'mlog%';
 oid | relname 
-----+---------
(0 rows)

-- case 2: drop view first
create table imv1_t(a set('ad','asf'), c int);
NOTICE:  CREATE TABLE will create implicit set "imv1_t_a_set" for column "imv1_t.a"
create incremental materialized view imv1_v as select * from imv1_t;
create incremental materialized view imv12_v as select * from imv1_t;
drop materialized view imv1_v;
select oid, relname from pg_class where relname like 'mlog%';
--?.*
--?.*
--?.*
--?.*
(2 rows)

drop materialized view imv12_v;
select oid, relname from pg_class where relname like 'mlog%';
 oid | relname 
-----+---------
(0 rows)

drop table imv1_t cascade;
-- case 3: drop table directly
create table imv1_t(a set('ad','asf'), c int);
NOTICE:  CREATE TABLE will create implicit set "imv1_t_a_set" for column "imv1_t.a"
create incremental materialized view imv1_v as select * from imv1_t;
create incremental materialized view imv12_v as select * from imv1_t;
drop table imv1_t cascade;
NOTICE:  drop cascades to 3 other objects
--?.*
drop cascades to materialized view imv1_v
drop cascades to materialized view imv12_v
select oid, relname from pg_class where relname like 'mlog%';
 oid | relname 
-----+---------
(0 rows)

-- case 4: multi columns
create table imv1_t(a set('ad','asf'), b set('b', 'bb'), c int, d set('b', 'bb'));
NOTICE:  CREATE TABLE will create implicit set "imv1_t_a_set" for column "imv1_t.a"
NOTICE:  CREATE TABLE will create implicit set "imv1_t_b_set" for column "imv1_t.b"
NOTICE:  CREATE TABLE will create implicit set "imv1_t_d_set" for column "imv1_t.d"
create incremental materialized view imv1_v as select * from imv1_t;
create incremental materialized view imv12_v as select * from imv1_t;
create incremental materialized view imv13_v as select * from imv1_t;
\d
--?.*
--?.*
--?.*
--?.*
--?.*
--?.*
--?.*
(4 rows)

drop table imv1_t cascade;
NOTICE:  drop cascades to 6 other objects
--?.*
--?.*
--?.*
drop cascades to materialized view imv1_v
drop cascades to materialized view imv12_v
drop cascades to materialized view imv13_v
select oid, relname from pg_class where relname like 'mlog%';
 oid | relname 
-----+---------
(0 rows)

\d
           List of relations
 Schema | Name | Type | Owner | Storage 
--------+------+------+-------+---------
(0 rows)

create table test_syn(id int unique,a1 varchar(20));
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "test_syn_id_key" for table "test_syn"
create materialized view mv_test_syn as select * from test_syn;
create incremental materialized view imv_test_syn as select * from test_syn;
create synonym s_mv_test_syn for mv_test_syn;
create synonym s_imv_test_syn for imv_test_syn;
REFRESH MATERIALIZED VIEW s_mv_test_syn;
REFRESH MATERIALIZED VIEW s_imv_test_syn;
REFRESH INCREMENTAL MATERIALIZED VIEW s_mv_test_syn;
ERROR:  "mv_test_syn" is not an incremental materialized view
REFRESH INCREMENTAL MATERIALIZED VIEW s_imv_test_syn;
drop synonym s_mv_test_syn;
drop synonym s_imv_test_syn;
drop table test_syn cascade;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to materialized view mv_test_syn
drop cascades to materialized view imv_test_syn
-- case 5: drop mlog table.
create table imv1_t(a int);
insert into imv1_t values(1);
create incremental materialized view imv1_v as select * from imv1_t;
declare
    oid int := (select oid from pg_class where relname = 'imv1_t');
    table_name varchar(20) := 'mlog_' || oid;
    sql_stmt text := 'Drop table ' || table_name;
begin
    execute sql_stmt;
END;
/
--?ERROR:  Use 'Drop table' to drop mlog table mlog_.* is not allowed.
--?CONTEXT:  SQL statement "Drop table mlog_.*"
PL/pgSQL function inline_code_block line 5 at EXECUTE statement
-- case 6: drop table that looks like a mlog with valid oid.
drop materialized view imv1_v;
declare
    oid int := (select oid from pg_class where relname = 'imv1_t');
    table_name varchar(20) := 'mlog_' || oid;
    create_stmt text := 'Create table ' || table_name || '(a int)' ;
    drop_stmt text := 'Drop table ' || table_name;
begin
    execute create_stmt;
    execute drop_stmt;
END;
/
--?WARNING:  "mlog_.*" is not an appropriated name for relation
DETAIL:  The kernel may treat it as a mlog table of materialized view
--?CONTEXT:  SQL statement "Create table mlog_.*(a int)"
PL/pgSQL function inline_code_block line 6 at EXECUTE statement
-- case 7: drop table that looks like a mlog without valid oid.
create table mlog_99999(a int);
WARNING:  "mlog_99999" is not an appropriated name for relation
DETAIL:  The kernel may treat it as a mlog table of materialized view
drop table mlog_99999;
drop table imv1_t cascade;
-- test about the privileges of refresh
create table t (id int);
insert into t select generate_series(1,10);
create materialized view mv_t as select * from t;
create user testuser with password 'Gauss@123';
grant usage on schema public to testuser;
grant select on t to testuser;
grant select on mv_t to testuser;
set role testuser password 'Gauss@123';
-- failed, permission denied
refresh materialized view mv_t;
ERROR:  permission denied for relation mv_t
DETAIL:  N/A
reset role;
grant delete,insert on mv_t to testuser;
set role testuser password 'Gauss@123';
-- failed, permission denied
refresh materialized view mv_t;
ERROR:  must be owner of relation mv_t
DETAIL:  N/A
reset role;
grant index on mv_t to testuser;
set role testuser password 'Gauss@123';
-- failed, permission denied
refresh materialized view mv_t;
ERROR:  must be owner of relation mv_t
DETAIL:  N/A
reset role;
alter table mv_t owner to testuser;
set role testuser password 'Gauss@123';
-- success
refresh materialized view mv_t;
reset role;
drop user testuser cascade;
\c regression
drop database test_imv_db;
-- mlog基础语法
create table mview_log_t1(c1 int, c2 varchar(10));
create materialized view log on mview_log_t1;
drop materialized view log on mview_log_t1;
-- 复用手动创建的物化视图日志
create materialized view log on mview_log_t1;
create incremental materialized view v1 as select c1, c2 from mview_log_t1 where c1 > 1;
create incremental materialized view v2 as select c1 from mview_log_t1;
insert into mview_log_t1 values(1,'1');
insert into mview_log_t1 values(2,'2');
update mview_log_t1 set c1 = 3, c2 = '3' where c1 = 1;
delete from mview_log_t1 where c1 = 2;
refresh incremental materialized view v1;
refresh incremental materialized view v2;
select * from v1;
 c1 | c2 
----+----
  3 | 3
(1 row)

select * from v2;
 c1 
----
  3
(1 row)

drop materialized view v1;
drop materialized view v2; -- 物化视图日志一起被删除
-- 重复创建删除物化视图日志
create incremental materialized view v1 as select c1, c2 from mview_log_t1 where c1 > 1;
create incremental materialized view v2 as select c1 from mview_log_t1;
insert into mview_log_t1 values(1,'1');
drop materialized view log on mview_log_t1;  -- 自动创建的物化视图日志也可手动删除
refresh incremental materialized view v1; -- 缺少物化视图日志，增量刷新报错
ERROR:  missing mlog for incrementally refresh
create materialized view log on mview_log_t1;
create materialized view log on mview_log_t1; -- 物化视图日志重复，创建报错。
ERROR:  materialized view log for table "mview_log_t1" already exists.
drop materialized view log on mview_log_t1;
drop materialized view log on mview_log_t1; -- 物化视图日志不存在，删除报错。
ERROR:  there is no materialized view log on this table
create materialized view log on mview_log_t1;
refresh incremental materialized view v1; -- 物化视图日志创建时间晚于最近一次刷新时间，增量刷新报错
ERROR:  materialized view log younger than last refresh
refresh materialized view v1;
refresh materialized view v2;
insert into mview_log_t1 values(2,'2');
refresh incremental materialized view v1; -- 全量刷新后，增量刷新成功
refresh incremental materialized view v2;
select * from v1;
 c1 | c2 
----+----
  3 | 3
  2 | 2
(2 rows)

select * from v2;
 c1 
----
  3
  1
  2
(3 rows)

-- 删除所有对象
drop materialized view log on mview_log_t1;
drop materialized view v1; -- 先删除物化视图日志，再删除物化视图
drop materialized view v2;
drop table mview_log_t1;
-- 延迟刷新基础功能
create table defer_t1(c1 int);
insert into defer_t1 values(1);
create materialized view v1 build deferred as select * from defer_t1;
create materialized view v2 build immediate as select * from defer_t1;
select * from v1; -- 无数据
 c1 
----
(0 rows)

select * from v2; -- 有数据
 c1 
----
  1
(1 row)

refresh materialized view v1;
select * from v1; -- 有数据
 c1 
----
  1
(1 row)

-- 同时放开with no data，但不支持一起指定
create incremental materialized view v3 as select * from defer_t1 with no data;
create incremental materialized view v4 as select * from defer_t1 with data;
create materialized view v5 as select * from defer_t1 with no data;
create materialized view v6 as select * from defer_t1 with data;
create materialized view v7 build deferred as select * from defer_t1 with no data; -- 语法不支持
ERROR:  syntax error at or near "with no"
LINE 1: ... view v7 build deferred as select * from defer_t1 with no da...
                                                             ^
select * from v3; -- 无数据
 c1 
----
(0 rows)

select * from v4; -- 有数据
 c1 
----
  1
(1 row)

select * from v5; -- 无数据
 c1 
----
(0 rows)

select * from v6; -- 有数据
 c1 
----
  1
(1 row)

refresh incremental materialized view v3; -- 报错，第一次需全量刷新
ERROR:  materialized view must use complete refresh first
refresh materialized view v3;
refresh materialized view v5;
select * from v3; -- 有数据
 c1 
----
  1
(1 row)

select * from v5; -- 有数据
 c1 
----
  1
(1 row)

-- 结合手动创建删除mlog
drop materialized view log on defer_t1;
create materialized view log on defer_t1;
insert into defer_t1 values(2);
create incremental materialized view v8 as select * from defer_t1 with no data;
select * from v8; -- 无数据
 c1 
----
(0 rows)

refresh materialized view v8;
select * from v8; -- 有数据
 c1 
----
  1
  2
(2 rows)

drop table defer_t1 cascade;
NOTICE:  drop cascades to 7 other objects
DETAIL:  drop cascades to materialized view v1
drop cascades to materialized view v2
drop cascades to materialized view v3
drop cascades to materialized view v4
drop cascades to materialized view v5
drop cascades to materialized view v6
drop cascades to materialized view v8
-- 多张表的情况
create table cov_t1(c1 int);
create table cov_t2(c1 int);
create materialized view log on cov_t1;
create materialized view log on cov_t2;
drop materialized view log on cov_t2;
create materialized view log on cov_t2;
create materialized view log on cov_t2;
ERROR:  materialized view log for table "cov_t2" already exists.
drop table cov_t1,cov_t2 cascade;
-- 只有mlog没有incre matview，不维护mlog
create table only_mlog_t1(c1 int);
create materialized view log on only_mlog_t1;
insert into only_mlog_t1 values (1);
create table only_mlog_record(c1 int);
declare
    oid int := (select oid from pg_class where relname = 'only_mlog_t1');
    table_name varchar(20) := 'mlog_' || oid;
    stmt text := 'insert into only_mlog_record select count(*) from ' || table_name;
begin
    execute stmt;
    commit;
END;
/
select * from only_mlog_record;
 c1 
----
  0
(1 row)

drop table only_mlog_t1, only_mlog_record;
-- \help
\h create materialized view log
Command:     CREATE MATERIALIZED VIEW LOG
Description: define a new materialized view log
Syntax:
CREATE MATERIALIZED VIEW LOG ON table_name;

\h drop materialized view log
Command:     DROP MATERIALIZED VIEW LOG
Description: drop materialized view log
Syntax:
DROP MATERIALIZED VIEW LOG ON table_name;

\h create materialized view
Command:     CREATE MATERIALIZED VIEW
Description: define a new materialized view
Syntax:
CREATE [ INCREMENTAL ] MATERIALIZED VIEW table_name
    [ (column_name [, ...] ) ]
    [ TABLESPACE tablespace_name ]
    [ BUILD DEFERRED | BUILD IMMEDIATE ]
    AS query
    [ WITH [ NO ] DATA ]

